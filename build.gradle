apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'provided-base'

// Classpath entry for Eclipse WTP which changes the order of classpathentries; otherwise no sources for 3rd party jars are shown
eclipse.classpath.file.withXml { xml ->
	def node = xml.asNode()
	node.remove( node.find { it.@path == 'org.eclipse.jst.j2ee.internal.web.container' } )
	node.appendNode( 'classpathentry', [ kind: 'con', path: 'org.eclipse.jst.j2ee.internal.web.container', exported: 'true'])
}

buildscript {
	repositories {
		// Add to gradle provided and optional features
		jcenter()
	}

	dependencies {
		// Add to gradle provided and optional features
		 classpath 'com.netflix.nebula:gradle-extra-configurations-plugin:1.12.+'
	}
}

war.archiveName "apt-test.war"

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}

repositories { 
	mavenCentral() 
}

ext.versions = [
	junit:		'4.11',
	mockito:	'1.9.5',
	hamcrest:	'1.3',

	slf4j:		'1.7.7',
	logback:	'1.1.2',

	jersey:		'2.11',
	jackson:	'2.4.2',

	spring:		'4.1.0.RELEASE',
	aspectj:	'1.8.2',

	selma:		'0.8'
]

version = '0.1'
group = "com.gb.sboum"

jar {
	manifest.attributes provider: 'sBoum Company'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

configurations {
	all*.exclude group: 'org.mockito', module: 'mockito-all'
	
	all*.exclude group: 'commons-logging', module: 'commons-logging'
	all*.exclude group: 'log4j', module: 'log4j'
	all*.exclude group: 'org.apache.logging.log4j'

	all*.exclude group: 'org.slf4j', module: 'slf4j-jcl'
	all*.exclude group: 'org.slf4j', module: 'slf4j-log4j12'
	all*.exclude group: 'org.slf4j', module: 'slf4j-jdk14'
	all*.exclude group: 'org.slf4j', module: 'slf4j-nop'
	all*.exclude group: 'org.slf4j', module: 'slf4j-simple'
}

ext.libs = [
	'hamcrest-core':				["org.hamcrest:hamcrest-core:${versions.hamcrest}"], // Because JUnit and Mockito use it
	'junit':						["junit:junit:${versions.junit}", { exclude group: 'org.hamcrest', module: 'hamcrest-core' }],
	// NEVER use mockito-all, see mockito-core VS mockito-all https://code.google.com/p/mockito/wiki/DeclaringMockitoDependency
	'mockito-core': 				["org.mockito:mockito-core:${versions.mockito}", { exclude group: 'org.hamcrest', module: 'hamcrest-core' }],


	'slf4j-api':					["org.slf4j:slf4j-api:${versions.slf4j}"],
	'logback-core':					["ch.qos.logback:logback-core:${versions.logback}"],
	'logback-classic':				["ch.qos.logback:logback-classic:${versions.logback}"],
	'jcl-over-slf4j':				["org.slf4j:jcl-over-slf4j:${versions.slf4j}"],
	'log4j-over-slf4j':				["org.slf4j:log4j-over-slf4j:${versions.slf4j}"],
	// Be aware of the performance issue http://www.slf4j.org/legacy.html#jul-to-slf4j
	'jul-to-slf4j':					["org.slf4j:jul-to-slf4j:${versions.slf4j}"],

	'jersey-container-servlet':		["org.glassfish.jersey.containers:jersey-container-servlet:${versions.jersey}"],
	'jersey-media-json-jackson':	["org.glassfish.jersey.media:jersey-media-json-jackson:${versions.jersey}", {
			exclude group: 'com.fasterxml.jackson.jaxrs'
			exclude group: 'com.fasterxml.jackson.core'
			exclude group: 'com.fasterxml.jackson.datatype'
		}],
	'jersey-bean-validation':		["org.glassfish.jersey.ext:jersey-bean-validation:${versions.jersey}"],
	'jersey-spring3':				["org.glassfish.jersey.ext:jersey-spring3:${versions.jersey}", {
			exclude group: 'org.springframework', module: 'spring-web' // To show why we include it later
			exclude group: 'org.springframework'
		}],

	'jackson-core':					["com.fasterxml.jackson.core:jackson-core:${versions.jackson}"],
	'jackson-annotations':			["com.fasterxml.jackson.core:jackson-annotations:${versions.jackson}"],
	'jackson-databind':				["com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"],
	'jackson-jaxrs-json-provider':	["com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${versions.jackson}"],
	'jackson-datatype-jsr310':		["com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${versions.jackson}"],
	'jackson-datatype-jsr353':		["com.fasterxml.jackson.datatype:jackson-datatype-jsr353:${versions.jackson}"],

	'spring-core':					["org.springframework:spring-core:${versions.spring}"],
	'spring-beans':					["org.springframework:spring-beans:${versions.spring}"],
	'spring-tx':					["org.springframework:spring-tx:${versions.spring}"],
	'spring-context': 				["org.springframework:spring-context:${versions.spring}"],
	'spring-web':					["org.springframework:spring-web:${versions.spring}"],	
	
	'selma-processor':				["fr.xebia.extras:selma-processor:${versions.selma}"],
	'selma':						["fr.xebia.extras:selma:${versions.selma}"]
]

dependencies {
	compile libs.'slf4j-api'
	compile libs.'logback-core'
	compile libs.'logback-classic'
	compile libs.'jcl-over-slf4j'
	compile libs.'log4j-over-slf4j'
	compile libs.'jul-to-slf4j'

	compile libs.'jersey-container-servlet'
	compile libs.'jersey-media-json-jackson'
	compile libs.'jersey-bean-validation'
	compile libs.'jersey-spring3'

	compile libs.'jackson-core'
	compile libs.'jackson-annotations'
	compile libs.'jackson-databind'
	compile libs.'jackson-jaxrs-json-provider'
	compile libs.'jackson-datatype-jsr310'
	compile libs.'jackson-datatype-jsr353'

	compile libs.'spring-core'
	compile libs.'spring-beans'
	compile libs.'spring-tx'
	compile libs.'spring-context'
	compile libs.'spring-web'
	
	provided libs.'selma-processor'
	compile libs.'selma'
	
	testCompile libs.'hamcrest-core'
	testCompile libs.'junit'
	testCompile libs.'mockito-core'
}

ext.generatedSrc = "$buildDir/generated-src"
ext.generatedSrcDir = file("$generatedSrc")

// Uncomment if APT doesn't work, especially if you have AJDT
// The conterpart is that you need to run "./gradlew compileJava" first, before deploying with Eclipse
//sourceSets {
//	main {
//		java {
//			srcDir generatedSrcDir
//		}
//	}
//}

compileJava {	
    doFirst {
		generatedSrcDir.exists() || generatedSrcDir.mkdirs()
        options.compilerArgs += [
                '-s', "${generatedSrc}"
        ]
    }
}

task wrapper(type: Wrapper) {
	gradleVersion = '2.1'
}
